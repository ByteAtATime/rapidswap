{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/RapidSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./SwapInstance.sol\";\n\ncontract RapidSwapFactory {\n  address public immutable UNISWAP_ROUTER;\n  address public immutable WETH;\n\n  SwapDeployment[] public deployments;\n\n  struct SwapDeployment {\n    uint256 id;\n    address swapAddress;\n    address token;\n    uint256 slippage;\n  }\n\n  event SwapDeployed(\n    uint256 indexed id,\n    address indexed token,\n    address swapAddress,\n    uint256 slippage\n  );\n\n  constructor(address _uniswapRouter, address _weth) {\n    UNISWAP_ROUTER = _uniswapRouter;\n    WETH = _weth;\n  }\n\n  function deploySwap(address _token, uint256 _slippage) external {\n    uint256 id = deployments.length;\n\n    SwapInstance swap = new SwapInstance(id, UNISWAP_ROUTER, address(WETH), _token, _slippage);\n\n    deployments.push(SwapDeployment({\n      id: id,\n      swapAddress: address(swap),\n      token: _token,\n      slippage: _slippage\n    }));\n\n    emit SwapDeployed(id, _token, address(swap), _slippage);\n  }\n}\n"
    },
    "contracts/SwapInstance.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract SwapInstance {\n  ISwapRouter02 public immutable UNISWAP_ROUTER;\n  IWETH public immutable WETH;\n\n  uint256 public immutable id;\n  address public immutable token;\n  uint256 public immutable slippage;\n\n  constructor(uint256 _id, address _uniswap, address _weth, address _token, uint256 _slippage) {\n    id = _id;\n    UNISWAP_ROUTER = ISwapRouter02(_uniswap);\n    WETH = IWETH(_weth);\n\n    token = _token;\n    slippage = _slippage;\n  }\n\n  fallback() external payable {\n    WETH.deposit{value: msg.value}();\n    WETH.approve(address(UNISWAP_ROUTER), msg.value);\n\n    uint256 minOut = (msg.value * (100000 - slippage)) / 100000;\n\n    ISwapRouter02.ExactInputSingleParams memory params = ISwapRouter02.ExactInputSingleParams({\n      tokenIn: address(WETH),\n      tokenOut: token,\n      fee: 3000,\n      recipient: msg.sender,\n      amountIn: msg.value,\n      amountOutMinimum: minOut,\n      sqrtPriceLimitX96: 0\n    });\n\n    UNISWAP_ROUTER.exactInputSingle(params);\n  }\n}\n\ninterface ISwapRouter02 {\n  struct ExactInputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n}\n\ninterface IWETH is IERC20 {\n  function deposit() external payable;\n  function withdraw(uint256 amount) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}