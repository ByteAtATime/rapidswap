// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SwapDeployed extends ethereum.Event {
  get params(): SwapDeployed__Params {
    return new SwapDeployed__Params(this);
  }
}

export class SwapDeployed__Params {
  _event: SwapDeployed;

  constructor(event: SwapDeployed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get swapAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RapidSwapFactory__deploymentsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;

  constructor(value0: BigInt, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getSwapAddress(): Address {
    return this.value1;
  }

  getToken(): Address {
    return this.value2;
  }
}

export class RapidSwapFactory extends ethereum.SmartContract {
  static bind(address: Address): RapidSwapFactory {
    return new RapidSwapFactory("RapidSwapFactory", address);
  }

  UNISWAP_ROUTER(): Address {
    let result = super.call("UNISWAP_ROUTER", "UNISWAP_ROUTER():(address)", []);

    return result[0].toAddress();
  }

  try_UNISWAP_ROUTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UNISWAP_ROUTER",
      "UNISWAP_ROUTER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployments(param0: BigInt): RapidSwapFactory__deploymentsResult {
    let result = super.call(
      "deployments",
      "deployments(uint256):(uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RapidSwapFactory__deploymentsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_deployments(
    param0: BigInt
  ): ethereum.CallResult<RapidSwapFactory__deploymentsResult> {
    let result = super.tryCall(
      "deployments",
      "deployments(uint256):(uint256,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RapidSwapFactory__deploymentsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _uniswapRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeploySwapCall extends ethereum.Call {
  get inputs(): DeploySwapCall__Inputs {
    return new DeploySwapCall__Inputs(this);
  }

  get outputs(): DeploySwapCall__Outputs {
    return new DeploySwapCall__Outputs(this);
  }
}

export class DeploySwapCall__Inputs {
  _call: DeploySwapCall;

  constructor(call: DeploySwapCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeploySwapCall__Outputs {
  _call: DeploySwapCall;

  constructor(call: DeploySwapCall) {
    this._call = call;
  }
}
